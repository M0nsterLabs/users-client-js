import fetch from 'isomorphic-fetch';
import ErrorNotFound from './ErrorNotFound';
import ErrorServerResponse from './ErrorServerResponse';
import ErrorBadRequest from './ErrorBadRequest';

/**
 * User open profile object
 *
 * @typedef {Object} UserOpenProfile
 * @property {String} userName - User full name
 * @property {String} avatar - Avatar url
 * @property {String} background - User background
 */

/**
 * User billing information
 *
 * @typedef {Object} UserBilling
 * @property {String} address - billing address
 * @property {String} city - billing city
 * @property {String} email - email
 * @property {String} firstname - first name
 * @property {String} lastname - last name
 * @property {String} postalcode - postal code
 * @property {String} billingphone - phone
 * @property {String} contactphone - phone
 * @property {String} country - country 2 symbol code of country
 * @property {String} state - 2 symbol code of country
 */

/**
 * My profile object
 *
 * @typedef {Object} MyProfile
 * @property {Number} id - user ID
 * @property {String} status - user status
 * (Waiting, Normal, Disabled, Without confirm, With confirm, Required confirm)
 * @property {String} login - User login(email)
 * @property {Number} registrationdate - date of user registration (timestamp)
 * @property {Number} sex - 1 for make and 0 female
 * @property {String} country - 2 symbol code of country
 * @property {String} state - 2 symbol code of country
 * @property {String} userName - user full name
 * @property {String} firstname - first name
 * @property {String} lastname - last name
 * @property {Number} birthday - birthday timestamp
 * @property {String} phone - phone number
 * @property {String} website - website url
 * @property {String} company - company name
 * @property {String} avatar - avatar url
 * @property {Number} passwordAutogenerated - number sequence
 * @property {UserBilling} billingInfo - Object with billing information
 * @property {Object} _links - Object with links to this entry
 * @property {Object} _links.self - Object with url to this entry
 * @property {String} _links.self.href - URL of this entry
 */

/**
 * User API JS client
 *
 * @namespace UserService
 * @class
 * @param {String} url - service url
 * @param {String | null} [token = null] - user access tocken if available
 * @see {@link http://service-users.dev/doc/ | Users service documentaion}
 */
export default class UserService {

  /**
   * Constructor saves service url
   * @memberof UserService
   * @constructor
   * @param {String} url - service url
   * @param {String | null} [token =null] - user access tocken if available
   * @return {User} - current instance
   */
  constructor(url, token = null) {
   /**
    * Service URL
    * @property {String} service url
    */
    this.url = UserService.checkUrl(url);
   /**
    * User access token
    * @property {String | null} [token =null] - user access tocken if available
    */
    this.token = token;
  }

  /**
   * Object with class service messages
   * @type {Object}
   */
  static messages = {
    url: 'Wrong Service URL format',
    idMissing: 'ID argument missing',
    tokenMissing: 'Token should be set',
    userNotFound: 'User not found',
    badRequest: 'Bad Request',
    urlMissing: 'URL required',
  }

 /**
  * Set access token
  *
  * @public
  * @method setToken
  * @memberof UserService
  * @public
  * @param {String} token - access token
  */
  setToken = (token) => {
    this.token = token;
  }

 /**
  * Validagte URL
  * @method checkUrl
  * @memberof UserService
  *
  * @param  {String} url - service URL
  * @throws {Error} - if URL do not match format Error will be thrown
  * @return {String} url - service URL
  */
  static checkUrl(url) {
    if (!/^(?:(?:(?:https?):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(url)) throw new Error(UserService.messages.url);
    return url;
  }

 /**
  * Return open user profile by id
  *
  * @method getOpenProfile
  * @memberof UserService
  *
  * @public
  * @param {Number} id - User id
  * @return {UserOpenProfile} - Promise.
  * @throws {ErrorServerResponse} - Throw error if response code other then 404 and 200-299
  * In common case this would mean service fail
  * @throws {ErrorNotFound} - Throw error if response code is 404 and mean that user was not found
  * @throws {FetchError} - Throw error there was some error produced by fetch api
  * Will resolve with {@link UserOpenProfile|UserOpenProfile}
  * @throws {Error} - Error with server response code and message
  */
  async getOpenProfile(id) {
    if (id === undefined) {
      throw new ErrorBadRequest(
        400,
        UserService.messages.badRequest,
        UserService.messages.idMissing);
    }
    const response = await fetch(`${this.url}users/${id}/profile`);
    if (response.ok) {
      const json = await response.json();
      return json;
    }

    if (response.status === 404) throw new ErrorNotFound(UserService.messages.userNotFound);

    throw new ErrorServerResponse(response.status, response.statusText);
  }

 /**
  * Return —Åurrent user profile
  * You must have access_token in cookies
  *
  * @method getMyProfile
  * @memberof UserService
  *
  * @public
  * @return {MyProfile} - Promise. Will resolve with {@link MyProfile|MyProfile}.
  * @throws {Error} - Error with server response code and message
  */
  async getMyProfile() {
    if (this.token === null) {
      throw new ErrorBadRequest(
        400,
        UserService.messages.badRequest,
        UserService.messages.tokenMissing);
    }

    const response = await fetch(`${this.url}users/profile`);

    if (response.ok) {
      const json = await response.json();
      return json;
    }

    if (response.status === 404) throw new ErrorNotFound(UserService.messages.userNotFound);

    throw new ErrorServerResponse(response.status, response.statusText);
  }

 /**
  * Fetch remote resource
  *
  * @namespace ServiceUsers
  * @method request
  * @memberof UserService
  *
  * @static
  * @param {String} url - resource url
  * @param {Object} userOptions - user defined options
  * @return {Promise} - Promise with server {@link https://developer.mozilla.org/docs/Web/API/Response|Response}
  */
  async request(url, userOptions) {
    if (url === undefined) {
      throw new ErrorBadRequest(
        400,
        UserService.messages.badRequest,
        UserService.messages.urlMissing);
    }
    const headers = {};
    if (this.token !== null) headers.Authorization = this.token;
    const defaultOptions = {
      method: 'GET',
      headers,
      data: {},
    };
    const options = { ...defaultOptions, ...userOptions };
    return fetch(url, options);
  }
}
